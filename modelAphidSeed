function aphidData = modelAphid(T, init, N)
%N is number of aphids desired, T is number of desired timesteps
r = .2; %radius of experimental arena, in m

%bloody ridiculous constants needed for the model, all from pea aphid paper

psmNaught = 0.1587;
psmInfinite = 0.3552;
dsm = 0.0079; %in m
changesm = .0739; %in m

pmsNaught = 0.5508;
pmsInfinite = 0.128;
dms = .0134; %in m

lNaught = .0003; %in m
lInfinite = .0013; %in m
dl = 0.0074; %in m

zj = 0;

%INITIALISE THE APHIDS
%aphids by (1) angle, (2) length, (3) boolean indicated stopped (0) or moving
%(1), (4) rectangular coordinates in form x + yi, (5) direction of motion
%from the horizontal (sum of angles)
aphids = zeros(N, 5);

%INIT: (1) aphid number, (2) xcoord, (3) ycoord, (4) xdir, (5) ydir, (6) moving

aphidNumbers = init(:, 1);
aphids(:, 4) = init(:, 2) + init(:, 3)*1i;
aphids(:, 3) = init(:, 6);

for i = 1:N
    
   %get the angles sorted out
   x = init(i, 4);
   y = init(i, 5);
   angle = tan(y/x);
   if x < 0
       angle = angle + pi;
   end 
   aphids(i, 1) = angle;
   aphids(i, 5) = angle;
   
   %and the length/vector
   aphids(i, 2) = sqrt(init(i, 2)^2+init(i, 3)^2);
   
end

 %plotAphids(aphids(:, 4), r, 1); %PLOT LINE ONE
 
 aphidData = zeros(N, 4); %filling in first frame into aphidData
 aphidData(:, 1) = aphidNumbers;
 aphidData(:, 2) = ones(N, 1); %because this is just for the first frame
 aphidData(:, 3) = real(aphids(:, 4));
 aphidData(:, 4) = imag(aphids(:, 4));

for t = 1:(T-1)
    newFrame = zeros(N, 4);
    newFrame(:, 1) = aphidNumbers; %count of all the different aphids
    newFrame(:, 2) = (t+1)*ones(N, 1); %frame numbers
    
    %initialise distance matrix
    [Z1,Z2] = meshgrid(aphids(:,4),aphids(:,4));
    dist = abs(Z2-Z1);
    %set diagonal to 2*radius+1 length, so 0 diagonal won't trip up nearest
    %neighbor find
    dist(logical(eye(size(dist)))) = 2*r+1;
    
    %APHIDS RECALCULATING
    for i = 1:N
        d = min(dist(:, i));
        
        %determine if each aphid is going to move this round
        if aphids(i, 3) == 0 %if the aphid is stopped...
            probChange = psmNaught * exp(-d/dsm)+psmInfinite*(d/(d+changesm)); %psm(d)
            bool = rand <= probChange;
            if bool
                aphids(i, 3) = 1;
            end
        else %if the aphid is moving
            probChange = pmsInfinite+(pmsNaught-pmsInfinite)*exp(-d/dms);%pms(d)
            bool = rand <= probChange;
            if bool
                aphids(i, 3) = 0;
            end
        end
        
        
        
        
        %if the aphid is going to move, determine angle and distance, update
        %coords
        if aphids(i,3) == 1
            length = lInfinite + (lNaught - lInfinite)*exp(-d/dl);
            %rho = rhoInfinite + (rhoNaught - rhoInfinite)*exp(-d/drho);
            angle = wrappedCauchy(d);
            
            %aphids(i, 5) = aphids(i, 5) + rho;
            aphids(i, 5) = aphids(i, 5) + angle;
            newX = real(aphids(i, 4)) + length*cos(aphids(i, 5));
            newY = imag(aphids(i, 4)) + length*sin(aphids(i, 5));
            
            %test if going outside circle, if so reflect
            %test if going outside circle, if so reflect
            while sqrt(newX^2 + newY^2) > r
                vect = rebound(aphids(i, :), newX, newY, r, zj);
                aphids(i, 3) = vect(3);
                aphids(i, 4) = vect(4);
                newX = vect(1);
                newY = vect(2);
                
                if newX - aphids(i, 3) ~= 0
                    aphids(i, 5) = tan(abs(newY - aphids(i, 4))/abs(newX - aphids(i, 3)));
                    if (aphids(i, 3) < 0)
                        aphids(i, 5) = aphids(i, 5) + pi;
                    end
                else
                    aphids(i, 5) = sign(aphids(i, 4)) * pi/2;
                end
            end
            aphids(i, 4) = newX + 1i * newY;
            aphids(i, 1) = angle;
        end
    end
    
    %plotAphids(aphids(:, 4), r, t+1); %PLOT LINE TWO
    %pause(1);
    
    newFrame(:, 3) = real(aphids(:, 4));
    newFrame(:, 4) = imag(aphids(:, 4));
    aphidData = [aphidData; newFrame];
    
end
end

function plotAphids(coords, r, t)
coordsX = real(coords);
coordsY = imag(coords);

theta = linspace(0,2*pi,1000);
circle = r*exp(1i*theta);

%plots current frame
scatter(coordsX, coordsY, 'filled');
title(strcat('Aphids ', t));
axis([-r r -r r]);
hold on; plot(circle,'b-'); hold off;
end

function vect = rebound(aphids, newX, newY, r, zj)

zi = aphids(4);
zf = newX + 1i * newY;


sample = 1000; % Number of points for numerical computations

line = linspace(zf, zi, sample);
theta = linspace(0,2*pi,sample);
circle = r*exp(1i*theta);

circle = [real(circle);imag(circle)];
line = [real(line); imag(line)];

pointIntersect = InterX(circle,line);

if(numel(pointIntersect) == 0)    
    if testEquality (sqrt(newX^2 + newY^2), r, 0.00001)
        h2 = sqrt(newX^2 + newY^2) - 0.00002;
        newX = h2 * cos(aphids(i, 5));
        newY = h2 * sin(aphids(i, 5));
    end 
    vect = [newX, newY, 0, 0, zj];
    return
end

d =  [real(zf)-real(zi), imag(zf)-imag(zi)];
n = -pointIntersect/norm(pointIntersect);


r = d-2*(d*n)*transpose(n);

reflect_vect = r ./ norm(r);

%find length of reflected segment
%reflectLength = abs(zi-zf) - sqrt(real(zi)^2 + imag(zi)^2)
%abs(zi-zf)
reflectLength = abs(zi-zf) - sqrt((pointIntersect(1)-real(zi))^2 + (pointIntersect(2)- imag(zi))^2);
%location of endpoint is angle&reflectLength away from origin,
%transposed by the intersection point

reflect_vect = reflectLength .* reflect_vect;
finalLocation = reflect_vect(1) + 1i*reflect_vect(2) + pointIntersect(1) + 1i*pointIntersect(2);

newX = real(finalLocation);
newY = imag(finalLocation);

vect = [newX, newY, pointIntersect(1), pointIntersect(2)];
end

% From Matlab file exchange
function P = InterX(L1,varargin)
%INTERX Intersection of curves
%   P = INTERX(L1,L2) returns the intersection points of two curves L1
%   and L2. The curves L1,L2 can be either closed or open and are described
%   by two-row-matrices, where each row contains its x- and y- coordinates.
%   The intersection of groups of curves (e.g. contour lines, multiply
%   connected regions etc) can also be computed by separating them with a
%   column of NaNs as for example
%
%         L  = [x11 x12 x13 ... NaN x21 x22 x23 ...;
%               y11 y12 y13 ... NaN y21 y22 y23 ...]
%
%   P has the same structure as L1 and L2, and its rows correspond to the
%   x- and y- coordinates of the intersection points of L1 and L2. If no
%   intersections are found, the returned P is empty.
%
%   P = INTERX(L1) returns the self-intersection points of L1. To keep
%   the code simple, the points at which the curve is tangent to itself are
%   not included. P = INTERX(L1,L1) returns all the points of the curve
%   together with any self-intersection points.
%
%   Example:
%       t = linspace(0,2*pi);
%       r1 = sin(4*t)+2;  x1 = r1.*cos(t); y1 = r1.*sin(t);
%       r2 = sin(8*t)+2;  x2 = r2.*cos(t); y2 = r2.*sin(t);
%       P = InterX([x1;y1],[x2;y2]);
%       plot(x1,y1,x2,y2,P(1,:),P(2,:),'ro')

%   Author : NS
%   Version: 3.0, 21 Sept. 2010

%   Two words about the algorithm: Most of the code is self-explanatory.
%   The only trick lies in the calculation of C1 and C2. To be brief, this
%   is essentially the two-dimensional analog of the condition that needs
%   to be satisfied by a function F(x) that has a zero in the interval
%   [a,b], namely
%           F(a)*F(b) <= 0
%   C1 and C2 exactly do this for each segment of curves 1 and 2
%   respectively. If this condition is satisfied simultaneously for two
%   segments then we know that they will cross at some point.
%   Each factor of the 'C' arrays is essentially a matrix containing
%   the numerators of the signed distances between points of one curve
%   and line segments of the other.

%...Argument checks and assignment of L2
error(nargchk(1,2,nargin));
if nargin == 1,
    L2 = L1;    hF = @lt;   %...Avoid the inclusion of common points
else
    L2 = varargin{1}; hF = @le;
end

%...Preliminary stuff
x1  = L1(1,:)';  x2 = L2(1,:);
y1  = L1(2,:)';  y2 = L2(2,:);
dx1 = diff(x1); dy1 = diff(y1);
dx2 = diff(x2); dy2 = diff(y2);

%...Determine 'signed distances'
S1 = dx1.*y1(1:end-1) - dy1.*x1(1:end-1);
S2 = dx2.*y2(1:end-1) - dy2.*x2(1:end-1);

C1 = feval(hF,D(bsxfun(@times,dx1,y2)-bsxfun(@times,dy1,x2),S1),0);
C2 = feval(hF,D((bsxfun(@times,y1,dx2)-bsxfun(@times,x1,dy2))',S2'),0)';

%...Obtain the segments where an intersection is expected
[i,j] = find(C1 & C2);
if isempty(i),P = zeros(2,0);return; end;

%...Transpose and prepare for output
i=i'; dx2=dx2'; dy2=dy2'; S2 = S2';
L = dy2(j).*dx1(i) - dy1(i).*dx2(j);
i = i(L~=0); j=j(L~=0); L=L(L~=0);  %...Avoid divisions by 0

%...Solve system of eqs to get the common points
P = unique([dx2(j).*S1(i) - dx1(i).*S2(j), ...
    dy2(j).*S1(i) - dy1(i).*S2(j)]./[L L],'rows')';

    function u = D(x,y)
        u = bsxfun(@minus,x(:,1:end-1),y).*bsxfun(@minus,x(:,2:end),y);
    end
end

%for float/double equality testing
function bool = testEquality (argOne, argTwo, epsilon)
bool = (argOne < argTwo + epsilon) && (argOne > argTwo - epsilon);
end


function angle = wrappedCauchy(d)
rhoNaught = 0.1387;
rhoInfinite = 0.9013;
drho = 0.0044; %in cm

num = 1000;
rho = rhoInfinite + (rhoNaught - rhoInfinite)*exp(-d/drho);
angle = getRandomCauchy(rho, num);
end

%function that pretends to give you an inverse of the cumulative
%distribution function of a wrapped cauchy distribution. It actually is
%giving a bunch of values which correspond to chunks of the y-axis,
%essentially sorting all x values into a finite number of bins. then
%calling a random number between -.5 and .5 will give you a response out of
%the cauchy distribution.
function xpoints = cauchyBins(rho, n)
%n = 10; %number of bins (starting small for testing)

xpoints = zeros(n, 1); %will hold the midpoints of the x regions corresponding to equally spaced chunks of the y axis

samplenumber = 1000;

xsamples = (2*pi).*rand(samplenumber, 1) - pi; %change to 1000 for more accuracy
ysamples = zeros(samplenumber, 1);
for j = 1:samplenumber
    ysamples(j) = (1/(2*pi)) * (atan((-sin(xsamples(j)/2) - rho * sin(xsamples(j)/2))/(-cos(xsamples(j)/2) + rho * cos(xsamples(j)/2))) - atan((sin(xsamples(j)/2) + rho * sin(xsamples(j)/2))/(-cos(xsamples(j)/2) + rho * cos(xsamples(j)/2))));
end

endpoints = zeros(n + 1, 1);
endpoints(1) = -pi;
endpoints(n+1) = pi;

%make a vector with n+1 entries
%put -pi in the 0th/1st position and pi in the nth
%then for each intermediary point, find the thing in ysamples closest
%to i* 1/n and put that in the ith place
%and then take the midpoints and put them in xpoints

for i = 2:n
    y = -.5 + (i-1)/n;
    [~, index] = min(abs(ysamples - y));
    idx = index(1);
    endpoints(i) = xsamples(idx);
    xpoints(i) = (endpoints(i-1)+ endpoints(i))/2;
end

xpoints(n) = (endpoints(n) + endpoints(n+1))/2;

end

function r = getRandomCauchy(rho, n)
%calculate bin number (note that these index from 1 to n, not 0 to n-1)
k = ceil(rand*n);
xpoints = cauchyBins(rho, n);
r = xpoints(k);
end
